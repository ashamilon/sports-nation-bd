// Production Prisma Schema for PlanetScale (MySQL)
// Copy this to schema.prisma when ready to deploy

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("customer") // customer, admin, moderator
  phone         String?
  password      String?   // For credentials auth
  address       String?
  city          String?
  state         String?
  zipCode       String?
  country       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Loyalty system fields
  loyaltyPoints    Int     @default(0)
  loyaltyLevel     String  @default("bronze") // bronze, silver, gold, platinum
  totalSpent       Float   @default(0)
  totalOrders      Int     @default(0)
  lastOrderDate    DateTime?
  loyaltyTier      String  @default("bronze")
  pointsEarned     Int     @default(0)
  pointsRedeemed   Int     @default(0)
  loyaltyStatus    String  @default("active")

  accounts Account[]
  sessions Session[]
  orders   Order[]
  reviews  Review[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products Product[]

  @@map("categories")
}

model Product {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  price       Float
  comparePrice Float?
  sku         String?   @unique
  stock       Int       @default(0)
  isActive    Boolean   @default(true)
  isFeatured  Boolean   @default(false)
  images      String    // JSON array of image URLs
  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  orderItems OrderItem[]
  reviews    Review[]
  collectionProducts CollectionProduct[]

  @@map("products")
}

model Order {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  status        OrderStatus @default(PENDING)
  total         Float
  subtotal      Float
  tax           Float       @default(0)
  shipping      Float       @default(0)
  discount      Float       @default(0)
  shippingAddress String
  billingAddress  String
  paymentMethod   String
  paymentStatus   PaymentStatus @default(PENDING)
  trackingNumber  String?
  notes          String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_items")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int
  title     String?
  comment   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
  @@map("reviews")
}

model SiteContent {
  id        String   @id @default(cuid())
  key       String   @unique
  title     String?
  content   String
  type      String   @default("text") // text, html, json
  category  String   @default("general")
  isActive  Boolean  @default(true)
  metadata  String?  // Additional JSON data
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("site_content")
}

model Banner {
  id          String    @id @default(cuid())
  title       String
  description String?
  image       String
  link        String?
  position    String    // home_top, home_hero, sidebar, footer
  priority    Int       @default(0)
  isActive    Boolean   @default(true)
  startsAt    DateTime?
  expiresAt   DateTime?
  metadata    String?   // Additional JSON data
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("banners")
}

model CountdownTimer {
  id          String    @id @default(cuid())
  title       String
  description String?
  targetDate  DateTime
  type        String    @default("general") // offer, product, event, sale
  targetId    String?   // ID of related product/offer
  isActive    Boolean   @default(true)
  position    String    @default("home") // home, product, category, sidebar
  priority    Int       @default(0)
  metadata    String?   // Additional JSON data
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("countdown_timers")
}

model Collection {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  image       String?
  parentId    String?
  parent      Collection? @relation("CollectionHierarchy", fields: [parentId], references: [id])
  children    Collection[] @relation("CollectionHierarchy")
  isActive    Boolean   @default(true)
  isFeatured  Boolean   @default(false)
  sortOrder   Int       @default(0)
  metadata    String?   // Additional JSON data
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products    CollectionProduct[]
  _count      CollectionCount?

  @@map("collections")
}

model CollectionProduct {
  id           String     @id @default(cuid())
  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  productId    String
  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  sortOrder    Int        @default(0)
  isFeatured   Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([collectionId, productId])
  @@map("collection_products")
}

model HomepageSettings {
  id          String   @id @default(cuid())
  sectionKey  String   @unique // e.g., 'hero', 'banners', 'collections', 'products', 'testimonials'
  sectionName String   // Display name for the section
  isVisible   Boolean  @default(true)
  sortOrder   Int      @default(0)
  metadata    String?  // JSON string for additional settings
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("homepage_settings")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

