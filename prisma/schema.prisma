// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("customer") // customer, admin, moderator
  phone         String?
  password      String?   // For credentials auth
  address       String?
  city          String?
  country       String?
  postalCode    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  orders   Order[]
  reviews  Review[]
  wishlist Wishlist?
  // CMS Relations
  pages         Page[]
  blogPosts     BlogPost[]
  media         Media[]
  contactForms  ContactForm[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  image       String?
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String
  price       Float
  comparePrice Float?
  sku         String   @unique
  stock       Int      @default(0)
  images      String   // JSON string of image URLs
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  weight      Float?
  dimensions  String?
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  variants    ProductVariant[]
  reviews     Review[]
  orderItems  OrderItem[]
  cartItems   CartItem[]
  wishlistItems WishlistItem[]
  badges      ProductBadge[]
  // Customization options
  allowNameNumber Boolean @default(false) // For jerseys
  nameNumberPrice Float? @default(250) // Additional price for name/number
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ProductVariant {
  id        String   @id @default(cuid())
  name      String
  value     String
  price     Float?
  stock     Int      @default(0)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  cartItems  CartItem[]
  wishlistItems WishlistItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        String   @id @default(cuid())
  userId    String   @unique
  items     CartItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  quantity  Int
  customOptions String? // JSON string for custom jerseys, badges, names, numbers
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId, variantId])
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     WishlistItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WishlistItem {
  id        String   @id @default(cuid())
  wishlistId String
  wishlist  Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([wishlistId, productId, variantId])
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  status          String      @default("pending") // pending, confirmed, processing, shipped, completed, cancelled, refunded
  paymentStatus   String      @default("pending") // pending, paid, partial, failed, refunded
  paymentMethod   String?
  paymentIntentId String?
  transactionId   String?
  subtotal        Float
  shippingCost    Float       @default(0)
  tipAmount       Float?      @default(0)
  total           Float
  currency        String      @default("BDT")
  customerLocation String?    // bangladesh, europe
  shippingAddress String      // JSON string
  billingAddress  String?     // JSON string
  trackingNumber  String?
  courierService  String?     // sundarban, pathao
  courierTrackingId String?   // Courier's tracking ID
  notes           String?
  items           OrderItem[]
  payments        Payment[]
  trackingUpdates TrackingUpdate[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model OrderItem {
  id            String         @id @default(cuid())
  orderId       String
  order         Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId     String
  product       Product        @relation(fields: [productId], references: [id])
  productVariantId String?
  productVariant ProductVariant? @relation(fields: [productVariantId], references: [id])
  quantity      Int
  price         Float
  customOptions String? // JSON string for custom jerseys, badges, names, numbers
  createdAt     DateTime       @default(now())
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int
  comment   String?
  isVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

model Payment {
  id              String   @id @default(cuid())
  orderId         String
  order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  amount          Float
  currency        String   @default("BDT")
  status          String   @default("pending") // pending, completed, failed, refunded
  paymentMethod   String   // card, bKash, Rocket, bank_transfer, cash_on_delivery
  transactionId   String?
  paymentIntentId String?
  metadata        String?  // JSON string for additional payment data
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Coupon {
  id          String     @id @default(cuid())
  code        String     @unique
  description String?
  type        String     // percentage, fixed
  value       Float
  minimumAmount Float?
  maximumDiscount Float?
  usageLimit  Int?
  usedCount   Int        @default(0)
  isActive    Boolean    @default(true)
  startsAt    DateTime?
  expiresAt   DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model ProductBadge {
  id        String   @id @default(cuid())
  name      String
  description String?
  price     Float
  image     String?  // Badge image URL
  isActive  Boolean  @default(true)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// CMS Models for Content Management
model SiteContent {
  id          String   @id @default(cuid())
  key         String   @unique // e.g., "home_hero_title", "contact_email"
  title       String?
  content     String   // Main content (can be HTML, JSON, or plain text)
  type        String   @default("text") // text, html, json, image, number, boolean
  category    String   @default("general") // hero, footer, contact, offers, etc.
  isActive    Boolean  @default(true)
  metadata    String?  // Additional JSON data
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Banner {
  id          String   @id @default(cuid())
  title       String
  description String?
  image       String   // Banner image URL
  link        String?  // Optional link URL
  position    String   // home_hero, home_top, product_page, etc.
  priority    Int      @default(0) // Higher number = higher priority
  isActive    Boolean  @default(true)
  startsAt    DateTime?
  expiresAt   DateTime?
  metadata    String?  // Additional JSON data
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CountdownTimer {
  id          String   @id @default(cuid())
  title       String
  description String?
  targetDate  DateTime
  type        String   @default("offer") // offer, product, event, etc.
  targetId    String?  // Product ID or other target
  isActive    Boolean  @default(true)
  position    String   @default("home") // home, product, category, etc.
  priority    Int      @default(0)
  metadata    String?  // Additional JSON data
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Offer {
  id          String   @id @default(cuid())
  title       String
  description String?
  type        String   // percentage, fixed_amount, buy_x_get_y, etc.
  value       Float
  code        String?  // Coupon code if applicable
  minimumAmount Float?
  maximumDiscount Float?
  usageLimit  Int?
  usedCount   Int      @default(0)
  isActive    Boolean  @default(true)
  startsAt    DateTime?
  expiresAt   DateTime?
  targetProducts String? // JSON array of product IDs
  targetCategories String? // JSON array of category IDs
  metadata    String?  // Additional JSON data
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Comprehensive CMS Models
model Page {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String   // HTML content
  excerpt     String?
  metaTitle   String?
  metaDescription String?
  metaKeywords String?
  template    String   @default("default") // page template
  isPublished Boolean  @default(false)
  publishedAt DateTime?
  authorId    String?
  author      User?    @relation(fields: [authorId], references: [id])
  sections    PageSection[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PageSection {
  id          String   @id @default(cuid())
  pageId      String
  page        Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  title       String?
  content     String   // HTML content
  type        String   @default("text") // text, image, video, gallery, etc.
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  metadata    String?  // Additional JSON data
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Navigation {
  id          String   @id @default(cuid())
  title       String
  url         String
  parentId    String?
  parent      Navigation? @relation("NavigationHierarchy", fields: [parentId], references: [id])
  children    Navigation[] @relation("NavigationHierarchy")
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  isExternal  Boolean  @default(false)
  target      String   @default("_self") // _self, _blank
  icon        String?
  metadata    String?  // Additional JSON data
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Media {
  id          String   @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  size        Int
  url         String
  alt         String?
  caption     String?
  category    String   @default("general") // images, videos, documents, etc.
  tags        String?  // JSON array of tags
  isActive    Boolean  @default(true)
  uploadedBy  String?
  uploader    User?    @relation(fields: [uploadedBy], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String   // HTML content
  excerpt     String?
  featuredImage String?
  metaTitle   String?
  metaDescription String?
  metaKeywords String?
  isPublished Boolean  @default(false)
  publishedAt DateTime?
  authorId    String?
  author      User?    @relation(fields: [authorId], references: [id])
  category    String?
  tags        String?  // JSON array of tags
  viewCount   Int      @default(0)
  isFeatured  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Testimonial {
  id          String   @id @default(cuid())
  name        String
  email       String?
  company     String?
  position    String?
  content     String
  rating      Int      @default(5) // 1-5 stars
  avatar      String?
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FAQ {
  id          String   @id @default(cuid())
  question    String
  answer      String
  category    String   @default("general")
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ContactForm {
  id          String   @id @default(cuid())
  name        String
  email       String
  phone       String?
  subject     String
  message     String
  status      String   @default("new") // new, read, replied, closed
  priority    String   @default("normal") // low, normal, high, urgent
  assignedTo  String?
  assignee    User?    @relation(fields: [assignedTo], references: [id])
  response    String?
  respondedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Newsletter {
  id          String   @id @default(cuid())
  email       String   @unique
  firstName   String?
  lastName    String?
  isActive    Boolean  @default(true)
  subscribedAt DateTime @default(now())
  unsubscribedAt DateTime?
  source      String?  // where they subscribed from
  tags        String?  // JSON array of interests
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SEO {
  id          String   @id @default(cuid())
  page        String   @unique // page path or identifier
  title       String?
  description String?
  keywords    String?
  ogTitle     String?
  ogDescription String?
  ogImage     String?
  twitterTitle String?
  twitterDescription String?
  twitterImage String?
  canonical   String?
  robots      String?  // index, noindex, follow, nofollow
  schema      String?  // JSON-LD structured data
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TrackingUpdate {
  id          String   @id @default(cuid())
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  status      String   // picked_up, in_transit, out_for_delivery, delivered, failed_delivery, returned
  location    String?  // Current location
  description String?  // Status description
  timestamp   DateTime @default(now())
  courierData String?  // JSON data from courier API
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
